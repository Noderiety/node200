"use strict";
require('traceur-source-maps').install(require('traceur'));
var request = require('request'),
    util = require('util'),
    http = require('http'),
    url = require('url'),
    fs = require('fs'),
    Writable = require('stream').Writable;
http.createServer(function(req, res) {
  var uri = 'http://127.0.0.1:8000' + url.parse(req.url).path;
  console.log(uri);
  var serverRequest = request({
    headers: req.headers,
    url: uri
  });
  var writeStream = fs.createWriteStream('./test.png');
  req.pipe(serverRequest).pipe(new SplitterStream(process.stdout, writeStream, res));
}).listen(9000);
function SplitterStream() {
  var streams = Array.prototype.slice.call(arguments);
  Writable.call(this);
  this._write = function(chunk, encoding, next) {
    streams.forEach((function(stream) {
      return stream.write(chunk);
    }));
    next();
  };
}
util.inherits(SplitterStream, Writable);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0cmVhbXNfc3BsaXR0ZXIuZXM2LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBTSxBQUFDLENBQUMscUJBQW9CLENBQUMsUUFBUSxBQUFDLENBQUMsT0FBTSxBQUFDLENBQUMsU0FBUSxDQUFDLENBQUMsQ0FBQztFQUFLLENBQUEsT0FBTSxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsU0FBUSxDQUFDO0FBQ3ZGLE9BQUcsRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLE1BQUssQ0FBQztBQUNyQixPQUFHLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxNQUFLLENBQUM7QUFDckIsTUFBRSxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsS0FBSSxDQUFDO0FBQ25CLEtBQUMsRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLElBQUcsQ0FBQztBQUNqQixXQUFPLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxRQUFPLENBQUMsU0FBUztBQUV2QyxHQUFHLGFBQWEsQUFBQyxDQUFDLFNBQVMsR0FBRSxDQUFHLENBQUEsR0FBRTtJQUM3QixDQUFBLEdBQUUsRUFBSSxDQUFBLHVCQUFzQixFQUFJLENBQUEsR0FBRSxNQUFNLEFBQUMsQ0FBQyxHQUFFLElBQUksQ0FBQyxLQUFLO0FBQzFELFFBQU0sSUFBSSxBQUFDLENBQUMsR0FBRSxDQUFDLENBQUE7SUFFWCxDQUFBLGFBQVksRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDO0FBQzNCLFVBQU0sQ0FBRyxDQUFBLEdBQUUsUUFBUTtBQUNuQixNQUFFLENBQUcsSUFBRTtBQUFBLEVBQ1IsQ0FBQztJQUVHLENBQUEsV0FBVSxFQUFJLENBQUEsRUFBQyxrQkFBa0IsQUFBQyxDQUFDLFlBQVcsQ0FBQztBQUNuRCxJQUFFLEtBQUssQUFBQyxDQUFDLGFBQVksQ0FBQyxLQUFLLEFBQUMsQ0FDM0IsR0FBSSxlQUFhLEFBQUMsQ0FBQyxPQUFNLE9BQU8sQ0FBRyxZQUFVLENBQUcsSUFBRSxDQUFDLENBQUMsQ0FBQTtBQUN0RCxDQUFDLE9BQU8sQUFBQyxDQUFDLElBQUcsQ0FBQyxDQUFBO0FBRWQsT0FBUyxlQUFhLENBQUMsQUFBQztJQUNuQixDQUFBLE9BQU0sRUFBSSxDQUFBLEtBQUksVUFBVSxNQUFNLEtBQUssQUFBQyxDQUFDLFNBQVEsQ0FBQztBQUNsRCxTQUFPLEtBQUssQUFBQyxDQUFDLElBQUcsQ0FBQyxDQUFBO0FBQ2xCLEtBQUcsT0FBTyxFQUFJLFVBQVMsS0FBSSxDQUFHLENBQUEsUUFBTyxDQUFHLENBQUEsSUFBRztBQUMxQyxVQUFNLFFBQVEsQUFBQyxFQUFDLFNBQUEsTUFBSztXQUFLLENBQUEsTUFBSyxNQUFNLEFBQUMsQ0FBQyxLQUFJLENBQUM7SUFBQSxFQUFDLENBQUE7QUFDN0MsT0FBRyxBQUFDLEVBQUMsQ0FBQTtFQUNOLENBQUE7QUFDRDtBQUNBLEdBQUcsU0FBUyxBQUFDLENBQUMsY0FBYSxDQUFHLFNBQU8sQ0FBQyxDQUFBO0FBQUEiLCJmaWxlIjoic3RyZWFtc19zcGxpdHRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJ3RyYWNldXItc291cmNlLW1hcHMnKS5pbnN0YWxsKHJlcXVpcmUoJ3RyYWNldXInKSk7bGV0IHJlcXVlc3QgPSByZXF1aXJlKCdyZXF1ZXN0Jylcblx0LCB1dGlsID0gcmVxdWlyZSgndXRpbCcpXG5cdCwgaHR0cCA9IHJlcXVpcmUoJ2h0dHAnKVxuXHQsIHVybCA9IHJlcXVpcmUoJ3VybCcpXG5cdCwgZnMgPSByZXF1aXJlKCdmcycpXG5cdCwgV3JpdGFibGUgPSByZXF1aXJlKCdzdHJlYW0nKS5Xcml0YWJsZVxuXG5odHRwLmNyZWF0ZVNlcnZlcihmdW5jdGlvbihyZXEsIHJlcykge1xuXHRsZXQgdXJpID0gJ2h0dHA6Ly8xMjcuMC4wLjE6ODAwMCcgKyB1cmwucGFyc2UocmVxLnVybCkucGF0aFxuXHRjb25zb2xlLmxvZyh1cmkpXG5cblx0bGV0IHNlcnZlclJlcXVlc3QgPSByZXF1ZXN0KHtcblx0XHRoZWFkZXJzOiByZXEuaGVhZGVycyxcblx0XHR1cmw6IHVyaVxuXHR9KVxuXG5cdGxldCB3cml0ZVN0cmVhbSA9IGZzLmNyZWF0ZVdyaXRlU3RyZWFtKCcuL3Rlc3QucG5nJylcblx0cmVxLnBpcGUoc2VydmVyUmVxdWVzdCkucGlwZShcblx0XHRuZXcgU3BsaXR0ZXJTdHJlYW0ocHJvY2Vzcy5zdGRvdXQsIHdyaXRlU3RyZWFtLCByZXMpKVxufSkubGlzdGVuKDkwMDApXG5cbmZ1bmN0aW9uIFNwbGl0dGVyU3RyZWFtKCkge1xuXHRsZXQgc3RyZWFtcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cylcblx0V3JpdGFibGUuY2FsbCh0aGlzKVxuXHR0aGlzLl93cml0ZSA9IGZ1bmN0aW9uKGNodW5rLCBlbmNvZGluZywgbmV4dCkge1xuXHRcdHN0cmVhbXMuZm9yRWFjaChzdHJlYW0gPT4gc3RyZWFtLndyaXRlKGNodW5rKSlcblx0XHRuZXh0KClcblx0fVxufVxudXRpbC5pbmhlcml0cyhTcGxpdHRlclN0cmVhbSwgV3JpdGFibGUpIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9